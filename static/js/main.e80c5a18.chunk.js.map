{"version":3,"sources":["containers/Quiz/Quiz.module.css","components/ActiveQuestion/ActiveQuestion.module.css","components/ActiveQuestion/AnswersList/AnswerItem/AnswerItem.module.css","components/UI/Loader/Loader.module.css","components/Result/Result.module.css","components/ActiveQuestion/AnswersList/AnswersList.module.css","components/UI/Button/Button.module.css","components/ActiveQuestion/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuestion/AnswersList/AnswersList.js","components/ActiveQuestion/ActiveQuestion.js","redux/quizReducer.js","components/UI/Loader/Loader.js","components/UI/Button/Button.js","containers/Quiz/Quiz.js","redux/actions.js","components/Result/Result.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","AnswerItem","description","answer","setUserAnswer","userAnswer","cls","styles","answerItem","push","htmlFor","className","join","type","id","name","onClick","AnswersList","answers","currentQuestionNumber","answerList","map","idx","key","ActiveQuestion","question","activeQuestion","info","initialState","quizData","score","quizReducer","state","action","Loader","props","classes","center","Button","disabled","buttonHandler","children","button","connect","quiz","fetchQuiz","dispatch","a","fetch","then","response","json","dataKey","data","console","log","setScore","useEffect","useState","isFinish","setIsFinish","setCurrentQuestionNumber","history","useHistory","checkAnswerHandler","style","counter","length","clearScore","result","App","exact","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e80c5a18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quiz\":\"Quiz_quiz__1LkCT\",\"counter\":\"Quiz_counter__3czlR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeQuestion\":\"ActiveQuestion_activeQuestion__TLAfQ\",\"info\":\"ActiveQuestion_info__7TVO8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerItem\":\"AnswerItem_answerItem__Os-sF\",\"active\":\"AnswerItem_active__n6KM2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__ANdA0\",\"lds-ripple\":\"Loader_lds-ripple__3Fwqm\",\"center\":\"Loader_center__Iyafz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"Result_result__31cNU\",\"info\":\"Result_info__3WW9A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerList\":\"AnswersList_answerList__2DUFE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2lgkF\"};","import React from \"react\";\nimport styles from \"./AnswerItem.module.css\";\n\nconst AnswerItem = ({answer: description, setUserAnswer, userAnswer}) => {\n  const cls = [styles.answerItem];\n\n  if (userAnswer === description) {\n    cls.push(styles[\"active\"]);\n  }\n\n  return (\n    <label htmlFor={description}>\n      <div className={cls.join(\" \")}>\n        <input\n          type=\"radio\"\n          id={description}\n          name={1}\n          onClick={() => setUserAnswer(description)}\n        />\n        {description}\n      </div>\n    </label>\n  );\n}\n\nexport default AnswerItem;\n","import React from \"react\";\nimport styles from \"./AnswersList.module.css\";\nimport AnswerItem from \"./AnswerItem/AnswerItem\";\n\nconst AnswersList = ({answers, currentQuestionNumber, setUserAnswer, userAnswer}) => {\n  return (\n    <div className={styles.answerList}>\n      {\n        answers.map((answer, idx) => {\n          return (\n            <AnswerItem\n              answer={answer}\n              key={`${idx}${answer}${currentQuestionNumber}`}\n              setUserAnswer={setUserAnswer}\n              userAnswer={userAnswer}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default AnswersList;\n","import React from \"react\";\nimport styles from \"./ActiveQuestion.module.css\";\nimport AnswersList from \"./AnswersList/AnswersList\";\n\nconst ActiveQuestion = ({question, currentQuestionNumber, setUserAnswer, userAnswer}) => {\n\n  return (\n    <div className={styles.activeQuestion}>\n      <div className={styles.info}>\n        <div>Запитання №{currentQuestionNumber + 1}</div>\n        <div>\n          {question.question}\n        </div>\n      </div>\n      <AnswersList\n        answers={question.answers}\n        currentQuestionNumber={currentQuestionNumber}\n        setUserAnswer={setUserAnswer}\n        userAnswer={userAnswer}/>\n    </div>\n  );\n}\n\nexport default ActiveQuestion;\n","const SET_QUIZ = \"SET-QUIZ\";\nconst SET_SCORE = \"SET-SCORE\";\nconst CLEAR_SCORE = \"CLEAR-SCORE\";\n\nlet initialState = {\n  quizData: null,\n  score: 0,\n};\n\nconst quizReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_QUIZ:\n      return {\n        ...state,\n        quizData: action.quizData\n      }\n    case SET_SCORE:\n      return {\n        ...state,\n        score: state.score + 1\n      }\n    case CLEAR_SCORE:\n      return {\n        ...state,\n        score: 0,\n      }\n    default:\n      return state;\n  }\n};\n\nexport const setQuiz = (quizData) => {\n  return {\n    type: SET_QUIZ,\n    quizData\n  }\n};\n\nexport const setScore = () => {\n  return {\n    type: SET_SCORE\n  }\n}\n\nexport const clearScore = () => {\n  return {\n    type: CLEAR_SCORE\n  }\n}\n\nexport default quizReducer;\n","import React from \"react\";\nimport classes from \"./Loader.module.css\"\n\nconst Loader = (props) => {\n    return (\n        <div className={classes.center}>\n            <div className={classes.Loader}>\n                <div/>\n                <div/>\n            </div>\n        </div>\n    );\n}\n\nexport default Loader\n","import React from \"react\";\nimport styles from \"./Button.module.css\";\n\nconst Button = ({disabled, buttonHandler, children}) => {\n  return (\n    <button\n      disabled={disabled}\n      onClick={() => buttonHandler()}\n      className={styles.button}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React, {useEffect, useState} from \"react\";\nimport style from \"./Quiz.module.css\";\nimport ActiveQuestion from \"../../components/ActiveQuestion/ActiveQuestion\";\nimport {connect} from \"react-redux\";\nimport {fetchQuiz} from \"../../redux/actions\";\nimport {setScore} from \"../../redux/quizReducer\";\nimport Loader from \"../../components/UI/Loader/Loader\";\nimport {useHistory} from \"react-router-dom\";\nimport Button from \"../../components/UI/Button/Button\";\n\nconst Quiz = ({fetchQuiz, quizData, setScore}) => {\n  useEffect(() => {\n    fetchQuiz();\n  }, []);\n\n  const [isFinish, setIsFinish] = useState(false);\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState(0);\n\n  let history = useHistory();\n\n  const checkAnswerHandler = () => {\n    if (quizData[currentQuestionNumber]['correct_answers'].join() === userAnswer) {\n      setScore();\n    }\n  }\n\n  const nextButtonHandler = () => {\n    checkAnswerHandler();\n    setUserAnswer(null);\n    setCurrentQuestionNumber(currentQuestionNumber + 1);\n  }\n\n  const finishButtonHandler = () => {\n    checkAnswerHandler();\n    setIsFinish(true);\n  }\n\n  if (isFinish) {\n    history.push(\"/result\");\n  }\n\n  return (\n    <div className={style.quiz}>\n      <h1>Наскільки ти кіберспортивний експерт</h1>\n      {\n        quizData ?\n          <>\n            <div className={style.counter}>\n              {`${currentQuestionNumber + 1} / ${quizData.length}`}\n            </div>\n            <ActiveQuestion\n              question={quizData[currentQuestionNumber]}\n              currentQuestionNumber={currentQuestionNumber}\n              setUserAnswer={setUserAnswer}\n              userAnswer={userAnswer}\n            />\n            {\n              currentQuestionNumber < quizData.length - 1\n                ? <Button\n                  buttonHandler={nextButtonHandler}\n                  disabled={!userAnswer}\n                >\n                  Продовжити\n                </Button>\n                : <Button\n                  buttonHandler={finishButtonHandler}\n                  disabled={!userAnswer}\n                >\n                  Завершити\n                </Button>\n            }\n          </>\n          : <Loader/>\n      }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    quizData: state.quiz.quizData,\n    score: state.quiz.score,\n  }\n}\n\nexport default connect(mapStateToProps, {fetchQuiz, setScore})(Quiz);\n","import {setQuiz} from \"./quizReducer\";\n\nexport function fetchQuiz() {\n  return async dispatch => {\n    try {\n      const data = await fetch(\"./data.json\").then(response => response.json());\n      const quiz = [];\n\n      for (let dataKey in data) {\n        quiz.push(data[dataKey]);\n      }\n\n      dispatch(setQuiz(quiz));\n    } catch (e) {\n      console.log(e)\n    }\n\n  }\n}\n","import React from \"react\";\nimport {clearScore} from \"../../redux/quizReducer\";\nimport {connect} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\";\nimport style from \"./Result.module.css\";\nimport Button from \"../UI/Button/Button\";\n\nconst Result = ({clearScore, score, quizData}) => {\n\n  const history = useHistory();\n\n  const tryAgainButtonHandler = () => {\n    clearScore();\n    history.push(\"/\")\n  }\n\n  const checkResultHandller = () => {\n    return quizData ? (score * 100) / quizData.length : 0;\n  }\n\n  return (\n    <div className={style.result}>\n      <div className={style.info}>\n        <h3>{`Ваш результат ${checkResultHandller()}%`}</h3>\n        <Button buttonHandler={tryAgainButtonHandler}>Спробувати знову</Button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    score: state.quiz.score,\n    quizData: state.quiz.quizData\n  }\n}\n\nexport default connect(mapStateToProps, {clearScore})(Result);\n","import React from 'react';\nimport Quiz from \"./containers/Quiz/Quiz\";\nimport {Route} from \"react-router-dom\";\nimport Result from \"./components/Result/Result\";\n\nfunction App() {\n  return (\n    <div>\n      <Route exact path='/' render={() => <Quiz />} />\n      <Route path='/result' render={() => <Result />} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\nimport thunk from 'redux-thunk';\nimport quizReducer from \"./quizReducer\";\n\nconst reducers = combineReducers({\n  quiz: quizReducer\n});\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(thunk)\n);\n\nwindow.store = store;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App/>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}